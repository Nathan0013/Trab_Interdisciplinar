// src/controllers/authController.js
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const db = require("../db"); // Supondo que você tenha uma conexão com o banco de dados

// Função para registrar um novo usuário
exports.register = async (req, res) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) {
      return res.status(500).json({ message: "Erro ao verificar o usuário", error: err });
    }

    if (results.length > 0) {
      return res.status(400).json({ message: "Usuário já existe" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, result) => {
      if (err) {
        return res.status(500).json({ message: "Erro ao criar o usuário", error: err });
      }
      return res.status(201).json({ message: "Usuário criado com sucesso" });
    });
  });
};

// Função para fazer o login
exports.login = (req, res) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM users WHERE username = ?', [username], async (err, results) => {
    if (err) {
      return res.status(500).json({ message: "Erro ao verificar o usuário", error: err });
    }

    if (results.length === 0) {
      return res.status(400).json({ message: "Usuário não encontrado" });
    }

    const user = results[0];
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(400).json({ message: "Senha incorreta" });
    }

    const token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });
    return res.status(200).json({ message: "Login bem-sucedido", token });
  });
};
